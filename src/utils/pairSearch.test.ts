import { describe, it, expect } from 'vitest';
import { searchPairKeys } from './pairSearch';

// Snapshot of the tokens available on the app on September 2023
const keyNameRecord = {
  dai_eth: 'DAI/ETH',
  steth_eth: 'STETH/ETH',
  usdc_usdt: 'USDC/USDT',
  dai_usdc: 'DAI/USDC',
  usdc_eth: 'USDC/ETH',
  dai_usdt: 'DAI/USDT',
  bnt_usdc: 'BNT/USDC',
  usdt_eth: 'USDT/ETH',
  reth_eth: 'RETH/ETH',
  pepe_usdc: 'PEPE/USDC',
  bnt_eth: 'BNT/ETH',
  wbtc_usdc: 'WBTC/USDC',
  bnt_vbnt: 'BNT/VBNT',
  link_usdt: 'LINK/USDT',
  vbnt_usdc: 'VBNT/USDC',
  ohm_usdc: 'OHM/USDC',
  xchf_rpl: 'XCHF/RPL',
  matic_arb: 'MATIC/ARB',
  usdc_tsuka: 'USDC/TSUKA',
  lbr_eth: 'LBR/ETH',
  pepe_eth: 'PEPE/ETH',
  usdc_lyxe: 'USDC/LYXE',
  rail_eth: 'RAIL/ETH',
  hrp_eth: 'HRP/ETH',
  silo_usdc: 'SILO/USDC',
  link_usdc: 'LINK/USDC',
  wbtc_eth: 'WBTC/ETH',
  wbtc_usdt: 'WBTC/USDT',
  '0x0_eth': '0X0/ETH',
  smt_eth: 'SMT/ETH',
  usdc_pepecoin: 'USDC/PEPECOIN',
  usdc_jay: 'USDC/JAY',
  wyd_eth: 'WYD/ETH',
  wsb_eth: 'WSB/ETH',
  ewtb_eth: 'EWTB/ETH',
  usdc_crv: 'USDC/CRV',
  bam_eth: 'BAM/ETH',
  steth_weth: 'STETH/WETH',
  eth2x_fli_eth: 'ETH2X-FLI/ETH',
  ersdl_eth: 'ERSDL/ETH',
  usdc_dext: 'USDC/DEXT',
  hex_eth: 'HEX/ETH',
  creth2_eth: 'CRETH2/ETH',
  unibot_weth: 'UNIBOT/WETH',
  paxg_usdc: 'PAXG/USDC',
  wbtc_reth: 'WBTC/RETH',
  lhinu_usdt: 'LHINU/USDT',
  ribbit_eth: 'RIBBIT/ETH',
  cvx_crv: 'CVX/CRV',
  pepe_turbo: 'PEPE/TURBO',
  mdt_weth: 'MDT/WETH',
  sfox_eth: 'SFOX/ETH',
  wjaura_aura: 'WJAURA/AURA',
  frax_usdc: 'FRAX/USDC',
  bee_eth: 'BEE/ETH',
  ssv_usdt: 'SSV/USDT',
  biao_eth: 'BIAO/ETH',
  lusd_usdc: 'LUSD/USDC',
  tucker_usdc: 'TUCKER/USDC',
  link_eth: 'LINK/ETH',
  grt_usdt: 'GRT/USDT',
  yfi_usdc: 'YFI/USDC',
  usdc_comp: 'USDC/COMP',
  ageur_usdc: 'AGEUR/USDC',
  wsteth_eth: 'WSTETH/ETH',
  big_eth: 'BIG/ETH',
  fxs_frax: 'FXS/FRAX',
  matic_usdc: 'MATIC/USDC',
  dai_steth: 'DAI/STETH',
  bnt_dai: 'BNT/DAI',
  oxo_usdt: 'OXO/USDT',
  uni_eth: 'UNI/ETH',
  oeth_eth: 'OETH/ETH',
  fumo_eth: 'FUMO/ETH',
  exrd_usdc: 'EXRD/USDC',
  wsteth_usdc: 'WSTETH/USDC',
  bitcoin_eth: 'BITCOIN/ETH',
  arcona_eth: 'ARCONA/ETH',
  iceth_eth: 'ICETH/ETH',
  om_weth: 'OM/WETH',
  usdp_eth: 'USDP/ETH',
  pendle_eth: 'PENDLE/ETH',
  bnt_pendle: 'BNT/PENDLE',
  snx_eth: 'SNX/ETH',
  evermoon_eth: 'EVERMOON/ETH',
  idle_usdt: 'IDLE/USDT',
  sgtv2_eth: 'SGTV2/ETH',
  usdt_pepe20: 'USDT/PEPE20',
  fxs_usdt: 'FXS/USDT',
  eth_pepe20: 'ETH/PEPE20',
  hitop_usdt: 'HITOP/USDT',
  rlb_usdc: 'RLB/USDC',
  wbtc_wsteth: 'WBTC/WSTETH',
  'pepe3.0_usdc': 'PEPE3.0/USDC',
  bnt_get: 'BNT/GET',
  usdc_bbs: 'USDC/BBS',
  lyxe_eth: 'LYXE/ETH',
  gamma_usdc: 'GAMMA/USDC',
  dai_mnw: 'DAI/MNW',
  eth_ibex: 'ETH/IBEX',
  usdc_eth2x_fli: 'USDC/ETH2X-FLI',
  wtao_usdc: 'WTAO/USDC',
  get_usdt: 'GET/USDT',
  eth_cash: 'ETH/CASH',
  caj_dai: 'CAJ/DAI',
  caj_usdt: 'CAJ/USDT',
  usdc_snx: 'USDC/SNX',
  rlb_eth: 'RLB/ETH',
  eusd_usdc: 'EUSD/USDC',
  pbr_usdt: 'PBR/USDT',
  fxs_eth: 'FXS/ETH',
  rpl_eth: 'RPL/ETH',
  cscs_usdt: 'CSCS/USDT',
  frax_crv: 'FRAX/CRV',
  bnt_crv: 'BNT/CRV',
  xbot_eth: 'XBOT/ETH',
  x_eth: 'X/ETH',
  wsteth_reth: 'WSTETH/RETH',
  peth_eth: 'PETH/ETH',
  crv_usdt: 'CRV/USDT',
  wozx_usdt: 'WOZX/USDT',
  xpro_eth: 'XPRO/ETH',
  x_weth: 'X/WETH',
  wbtc_dai: 'WBTC/DAI',
  bnt_link: 'BNT/LINK',
  kata_usdc: 'KATA/USDC',
  qnt_usdc: 'QNT/USDC',
  dxn_eth: 'DXN/ETH',
  eth_sweth: 'ETH/SWETH',
  bnt_acre: 'BNT/ACRE',
  xwizard_eth: 'XWIZARD/ETH',
  ankreth_eth: 'ANKRETH/ETH',
  usdc_saito: 'USDC/SAITO',
  shib20_eth: 'SHIB20/ETH',
  psyop_eth: 'PSYOP/ETH',
  frogdog_eth: 'FROGDOG/ETH',
  frxeth_eth: 'FRXETH/ETH',
  bazed_usdt: 'BAZED/USDT',
  weth_shield: 'WETH/SHIELD',
  shield_eth: 'SHIELD/ETH',
  ethereum_eth: 'ETHEREUM/ETH',
  mbot_eth: 'MBOT/ETH',
  shibie_eth: 'SHIBIE/ETH',
  bnt_shibie: 'BNT/SHIBIE',
  oly_usdt: 'OLY/USDT',
  cscs_eth: 'CSCS/ETH',
  bnt_rvt: 'BNT/RVT',
  srm_weth: 'SRM/WETH',
  axe_eth: 'AXE/ETH',
  rai_usdt: 'RAI/USDT',
  zcn_eth: 'ZCN/ETH',
  homer_pepe_weth: 'Homer Pepe/WETH',
  ldo_usdt: 'LDO/USDT',
  usdc_cscs: 'USDC/CSCS',
  shib_usdt: 'SHIB/USDT',
  eth_cbot: 'ETH/CBOT',
  guise_eth: 'GUISE/ETH',
  weth_shares: 'WETH/SHARES',
  ant_eth: 'ANT/ETH',
  parq_usdc: 'PARQ/USDC',
  eth_dai: 'ETH/DAI',
  eth_steth: 'ETH/STETH',
  usdt_usdc: 'USDT/USDC',
  usdc_dai: 'USDC/DAI',
  eth_usdc: 'ETH/USDC',
  usdt_dai: 'USDT/DAI',
  usdc_bnt: 'USDC/BNT',
  eth_usdt: 'ETH/USDT',
  eth_reth: 'ETH/RETH',
  usdc_pepe: 'USDC/PEPE',
  eth_bnt: 'ETH/BNT',
  usdc_wbtc: 'USDC/WBTC',
  vbnt_bnt: 'VBNT/BNT',
  usdt_link: 'USDT/LINK',
  usdc_vbnt: 'USDC/VBNT',
  usdc_ohm: 'USDC/OHM',
  rpl_xchf: 'RPL/XCHF',
  arb_matic: 'ARB/MATIC',
  tsuka_usdc: 'TSUKA/USDC',
  eth_lbr: 'ETH/LBR',
  eth_pepe: 'ETH/PEPE',
  lyxe_usdc: 'LYXE/USDC',
  eth_rail: 'ETH/RAIL',
  eth_hrp: 'ETH/HRP',
  usdc_silo: 'USDC/SILO',
  usdc_link: 'USDC/LINK',
  eth_wbtc: 'ETH/WBTC',
  usdt_wbtc: 'USDT/WBTC',
  eth_0x0: 'ETH/0X0',
  eth_smt: 'ETH/SMT',
  pepecoin_usdc: 'PEPECOIN/USDC',
  jay_usdc: 'JAY/USDC',
  eth_wyd: 'ETH/WYD',
  eth_wsb: 'ETH/WSB',
  eth_ewtb: 'ETH/EWTB',
  crv_usdc: 'CRV/USDC',
  eth_bam: 'ETH/BAM',
  weth_steth: 'WETH/STETH',
  eth_eth2x_fli: 'ETH/ETH2X-FLI',
  eth_ersdl: 'ETH/ERSDL',
  dext_usdc: 'DEXT/USDC',
  eth_hex: 'ETH/HEX',
  eth_creth2: 'ETH/CRETH2',
  weth_unibot: 'WETH/UNIBOT',
  usdc_paxg: 'USDC/PAXG',
  reth_wbtc: 'RETH/WBTC',
  usdt_lhinu: 'USDT/LHINU',
  eth_ribbit: 'ETH/RIBBIT',
  crv_cvx: 'CRV/CVX',
  turbo_pepe: 'TURBO/PEPE',
  weth_mdt: 'WETH/MDT',
  eth_sfox: 'ETH/SFOX',
  aura_wjaura: 'AURA/WJAURA',
  usdc_frax: 'USDC/FRAX',
  eth_bee: 'ETH/BEE',
  usdt_ssv: 'USDT/SSV',
  eth_biao: 'ETH/BIAO',
  usdc_lusd: 'USDC/LUSD',
  usdc_tucker: 'USDC/TUCKER',
  eth_link: 'ETH/LINK',
  usdt_grt: 'USDT/GRT',
  usdc_yfi: 'USDC/YFI',
  comp_usdc: 'COMP/USDC',
  usdc_ageur: 'USDC/AGEUR',
  eth_wsteth: 'ETH/WSTETH',
  eth_big: 'ETH/BIG',
  frax_fxs: 'FRAX/FXS',
  usdc_matic: 'USDC/MATIC',
  steth_dai: 'STETH/DAI',
  dai_bnt: 'DAI/BNT',
  usdt_oxo: 'USDT/OXO',
  eth_uni: 'ETH/UNI',
  eth_oeth: 'ETH/OETH',
  eth_fumo: 'ETH/FUMO',
  usdc_exrd: 'USDC/EXRD',
  usdc_wsteth: 'USDC/WSTETH',
  eth_bitcoin: 'ETH/BITCOIN',
  eth_arcona: 'ETH/ARCONA',
  eth_iceth: 'ETH/ICETH',
  weth_om: 'WETH/OM',
  eth_usdp: 'ETH/USDP',
  eth_pendle: 'ETH/PENDLE',
  pendle_bnt: 'PENDLE/BNT',
  eth_snx: 'ETH/SNX',
  eth_evermoon: 'ETH/EVERMOON',
  usdt_idle: 'USDT/IDLE',
  eth_sgtv2: 'ETH/SGTV2',
  pepe20_usdt: 'PEPE20/USDT',
  usdt_fxs: 'USDT/FXS',
  pepe20_eth: 'PEPE20/ETH',
  usdt_hitop: 'USDT/HITOP',
  usdc_rlb: 'USDC/RLB',
  wsteth_wbtc: 'WSTETH/WBTC',
  'usdc_pepe3.0': 'USDC/PEPE3.0',
  get_bnt: 'GET/BNT',
  bbs_usdc: 'BBS/USDC',
  eth_lyxe: 'ETH/LYXE',
  usdc_gamma: 'USDC/GAMMA',
  mnw_dai: 'MNW/DAI',
  ibex_eth: 'IBEX/ETH',
  eth2x_fli_usdc: 'ETH2X-FLI/USDC',
  usdc_wtao: 'USDC/WTAO',
  usdt_get: 'USDT/GET',
  cash_eth: 'CASH/ETH',
  dai_caj: 'DAI/CAJ',
  usdt_caj: 'USDT/CAJ',
  snx_usdc: 'SNX/USDC',
  eth_rlb: 'ETH/RLB',
  usdc_eusd: 'USDC/EUSD',
  usdt_pbr: 'USDT/PBR',
  eth_fxs: 'ETH/FXS',
  eth_rpl: 'ETH/RPL',
  usdt_cscs: 'USDT/CSCS',
  crv_frax: 'CRV/FRAX',
  crv_bnt: 'CRV/BNT',
  eth_xbot: 'ETH/XBOT',
  eth_x: 'ETH/X',
  reth_wsteth: 'RETH/WSTETH',
  eth_peth: 'ETH/PETH',
  usdt_crv: 'USDT/CRV',
  usdt_wozx: 'USDT/WOZX',
  eth_xpro: 'ETH/XPRO',
  weth_x: 'WETH/X',
  dai_wbtc: 'DAI/WBTC',
  link_bnt: 'LINK/BNT',
  usdc_kata: 'USDC/KATA',
  usdc_qnt: 'USDC/QNT',
  eth_dxn: 'ETH/DXN',
  sweth_eth: 'SWETH/ETH',
  acre_bnt: 'ACRE/BNT',
  eth_xwizard: 'ETH/XWIZARD',
  eth_ankreth: 'ETH/ANKRETH',
  saito_usdc: 'SAITO/USDC',
  eth_shib20: 'ETH/SHIB20',
  eth_psyop: 'ETH/PSYOP',
  eth_frogdog: 'ETH/FROGDOG',
  eth_frxeth: 'ETH/FRXETH',
  usdt_bazed: 'USDT/BAZED',
  shield_weth: 'SHIELD/WETH',
  eth_shield: 'ETH/SHIELD',
  eth_ethereum: 'ETH/ETHEREUM',
  eth_mbot: 'ETH/MBOT',
  eth_shibie: 'ETH/SHIBIE',
  shibie_bnt: 'SHIBIE/BNT',
  usdt_oly: 'USDT/OLY',
  eth_cscs: 'ETH/CSCS',
  rvt_bnt: 'RVT/BNT',
  weth_srm: 'WETH/SRM',
  eth_axe: 'ETH/AXE',
  usdt_rai: 'USDT/RAI',
  eth_zcn: 'ETH/ZCN',
  weth_homer_pepe: 'WETH/Homer Pepe',
  usdt_ldo: 'USDT/LDO',
  cscs_usdc: 'CSCS/USDC',
  usdt_shib: 'USDT/SHIB',
  cbot_eth: 'CBOT/ETH',
  eth_guise: 'ETH/GUISE',
  shares_weth: 'SHARES/WETH',
  eth_ant: 'ETH/ANT',
  usdc_parq: 'USDC/PARQ'
};
const nameMap = new Map<string, string>(Object.entries(keyNameRecord));

type TokenKey = keyof typeof keyNameRecord;

describe('Pair Key Search', () => {
  // Bind nameMap for all tests
  const searchKey = searchPairKeys.bind(undefined, nameMap);
  // Utils function for positive expect with type autocomplete
  const expectSearch = (search: string) => ({
    toEqual: (result: TokenKey[]) => expect(searchKey(search)).toEqual(result),
  });

  describe('Filter', () => {
    it('should not find match without separator', () => {
      expectSearch('DAIETH').toEqual([]);
    });

    it('should find exact match with separators " ", "-"", "/"', () => {
      expectSearch('DAI/ETH').toEqual(['dai_eth']);
      expectSearch('DAI / ETH').toEqual(['dai_eth']);
      expectSearch('DAI ETH').toEqual(['dai_eth']);
      expectSearch('DAI-ETH').toEqual(['dai_eth']);
      expectSearch('DAI - ETH').toEqual(['dai_eth']);
    });

    it('should find of symbol with separator inside of it', () => {
      expectSearch('eth2x-fli-eth').toEqual(['eth2x_fli_eth']);
      expectSearch('eth2x-fli eth').toEqual(['eth2x_fli_eth']);
      expectSearch('eth2x-fli/eth').toEqual(['eth2x_fli_eth']);
      expectSearch('eth-eth2x-fli').toEqual(['eth_eth2x_fli']);
      expectSearch('eth eth2x-fli').toEqual(['eth_eth2x_fli']);
      expectSearch('eth/eth2x-fli').toEqual(['eth_eth2x_fli']);
      expectSearch('eth/eth2x fli').toEqual(['eth_eth2x_fli']);
      expectSearch('eth eth2x fli').toEqual(['eth_eth2x_fli']);
    });

    it('should find all pairs for dai', () => {
      expect(searchKey('dai').length).toBe(16);
    });

    it('should find all reference of pairs in both direction', () => {
      expectSearch('eth2x').toEqual([
        'eth2x_fli_eth',
        'eth2x_fli_usdc',
        'eth_eth2x_fli',
        'usdc_eth2x_fli',
      ]);
    });
  });

  describe('Sorting', () => {
    it('should order by group, first base token in the pair, then quote token', () => {
      const result = searchKey('dai');
      expect(result.at(0)?.startsWith('dai')).toBeTruthy();
      expect(result.at(-1)?.endsWith('dai')).toBeTruthy();
    });
    it('should be in alphabetic order in the same group (base / quote)', () => {
      const result = searchKey('dai');
      expect(result.at(0)).toBe('eth_0x0');
      expect(result.at(1)).toBe('eth_ankreth');
      expect(result.at(2)).toBe('eth_ant');
      expect(result.at(-1)).toBe('wizard_eth');
      expect(result.at(-2)).toBe('zcn_eth');
    });
  });
});
